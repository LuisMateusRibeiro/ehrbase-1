/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.tables.records.AdminDeleteCompositionHistoryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminDeleteCompositionHistory extends TableImpl<AdminDeleteCompositionHistoryRecord> {

    private static final long serialVersionUID = 996262170;

    /**
     * The reference instance of <code>ehr.admin_delete_composition_history</code>
     */
    public static final AdminDeleteCompositionHistory ADMIN_DELETE_COMPOSITION_HISTORY = new AdminDeleteCompositionHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminDeleteCompositionHistoryRecord> getRecordType() {
        return AdminDeleteCompositionHistoryRecord.class;
    }

    /**
     * The column <code>ehr.admin_delete_composition_history.num</code>.
     */
    public final TableField<AdminDeleteCompositionHistoryRecord, Integer> NUM = createField(DSL.name("num"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>ehr.admin_delete_composition_history</code> table reference
     */
    public AdminDeleteCompositionHistory() {
        this(DSL.name("admin_delete_composition_history"), null);
    }

    /**
     * Create an aliased <code>ehr.admin_delete_composition_history</code> table reference
     */
    public AdminDeleteCompositionHistory(String alias) {
        this(DSL.name(alias), ADMIN_DELETE_COMPOSITION_HISTORY);
    }

    /**
     * Create an aliased <code>ehr.admin_delete_composition_history</code> table reference
     */
    public AdminDeleteCompositionHistory(Name alias) {
        this(alias, ADMIN_DELETE_COMPOSITION_HISTORY);
    }

    private AdminDeleteCompositionHistory(Name alias, Table<AdminDeleteCompositionHistoryRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private AdminDeleteCompositionHistory(Name alias, Table<AdminDeleteCompositionHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AdminDeleteCompositionHistory(Table<O> child, ForeignKey<O, AdminDeleteCompositionHistoryRecord> key) {
        super(child, key, ADMIN_DELETE_COMPOSITION_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public AdminDeleteCompositionHistory as(String alias) {
        return new AdminDeleteCompositionHistory(DSL.name(alias), this, parameters);
    }

    @Override
    public AdminDeleteCompositionHistory as(Name alias) {
        return new AdminDeleteCompositionHistory(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminDeleteCompositionHistory rename(String name) {
        return new AdminDeleteCompositionHistory(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminDeleteCompositionHistory rename(Name name) {
        return new AdminDeleteCompositionHistory(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Integer> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public AdminDeleteCompositionHistory call(UUID compoInput) {
        return new AdminDeleteCompositionHistory(DSL.name(getName()), null, new Field[] { 
              DSL.val(compoInput, org.jooq.impl.SQLDataType.UUID)
        });
    }

    /**
     * Call this table-valued function
     */
    public AdminDeleteCompositionHistory call(Field<UUID> compoInput) {
        return new AdminDeleteCompositionHistory(DSL.name(getName()), null, new Field[] { 
              compoInput
        });
    }
}
