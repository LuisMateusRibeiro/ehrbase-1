/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.Indexes;
import org.ehrbase.jooq.pg.Keys;
import org.ehrbase.jooq.pg.tables.records.TemplateStoreRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TemplateStore extends TableImpl<TemplateStoreRecord> {

    private static final long serialVersionUID = -1969264116;

    /**
     * The reference instance of <code>ehr.template_store</code>
     */
    public static final TemplateStore TEMPLATE_STORE = new TemplateStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TemplateStoreRecord> getRecordType() {
        return TemplateStoreRecord.class;
    }

    /**
     * The column <code>ehr.template_store.id</code>.
     */
    public final TableField<TemplateStoreRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.template_store.template_id</code>.
     */
    public final TableField<TemplateStoreRecord, String> TEMPLATE_ID = createField(DSL.name("template_id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.template_store.content</code>.
     */
    public final TableField<TemplateStoreRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.template_store.sys_transaction</code>.
     */
    public final TableField<TemplateStoreRecord, Timestamp> SYS_TRANSACTION = createField(DSL.name("sys_transaction"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>ehr.template_store</code> table reference
     */
    public TemplateStore() {
        this(DSL.name("template_store"), null);
    }

    /**
     * Create an aliased <code>ehr.template_store</code> table reference
     */
    public TemplateStore(String alias) {
        this(DSL.name(alias), TEMPLATE_STORE);
    }

    /**
     * Create an aliased <code>ehr.template_store</code> table reference
     */
    public TemplateStore(Name alias) {
        this(alias, TEMPLATE_STORE);
    }

    private TemplateStore(Name alias, Table<TemplateStoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private TemplateStore(Name alias, Table<TemplateStoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TemplateStore(Table<O> child, ForeignKey<O, TemplateStoreRecord> key) {
        super(child, key, TEMPLATE_STORE);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEMPLATE_STORE_PKEY);
    }

    @Override
    public UniqueKey<TemplateStoreRecord> getPrimaryKey() {
        return Keys.TEMPLATE_STORE_PKEY;
    }

    @Override
    public List<UniqueKey<TemplateStoreRecord>> getKeys() {
        return Arrays.<UniqueKey<TemplateStoreRecord>>asList(Keys.TEMPLATE_STORE_PKEY);
    }

    @Override
    public TemplateStore as(String alias) {
        return new TemplateStore(DSL.name(alias), this);
    }

    @Override
    public TemplateStore as(Name alias) {
        return new TemplateStore(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TemplateStore rename(String name) {
        return new TemplateStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TemplateStore rename(Name name) {
        return new TemplateStore(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
