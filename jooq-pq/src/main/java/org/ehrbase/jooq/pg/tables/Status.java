/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import com.nedap.archie.rm.datastructures.ItemStructure;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.binding.OtherDetailsJsonbBinder;
import org.ehrbase.jooq.binding.SysPeriodBinder;
import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.Indexes;
import org.ehrbase.jooq.pg.Keys;
import org.ehrbase.jooq.pg.udt.DvCodedText;
import org.ehrbase.jooq.pg.udt.records.DvCodedTextRecord;
import org.ehrbase.jooq.pg.tables.records.StatusRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Status extends TableImpl<StatusRecord> {

    private static final long serialVersionUID = -1002043084;

    /**
     * The reference instance of <code>ehr.status</code>
     */
    public static final Status STATUS = new Status();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatusRecord> getRecordType() {
        return StatusRecord.class;
    }

    /**
     * The column <code>ehr.status.id</code>.
     */
    public final TableField<StatusRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("uuid_generate_v4()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>ehr.status.ehr_id</code>.
     */
    public final TableField<StatusRecord, UUID> EHR_ID = createField(DSL.name("ehr_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.status.is_queryable</code>.
     */
    public final TableField<StatusRecord, Boolean> IS_QUERYABLE = createField(DSL.name("is_queryable"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>ehr.status.is_modifiable</code>.
     */
    public final TableField<StatusRecord, Boolean> IS_MODIFIABLE = createField(DSL.name("is_modifiable"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>ehr.status.party</code>.
     */
    public final TableField<StatusRecord, UUID> PARTY = createField(DSL.name("party"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.status.other_details</code>.
     */
    public final TableField<StatusRecord, ItemStructure> OTHER_DETAILS = createField(DSL.name("other_details"), org.jooq.impl.SQLDataType.JSONB, this, "", new OtherDetailsJsonbBinder());

    /**
     * The column <code>ehr.status.sys_transaction</code>.
     */
    public final TableField<StatusRecord, Timestamp> SYS_TRANSACTION = createField(DSL.name("sys_transaction"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>ehr.status.sys_period</code>.
     */
    public final TableField<StatusRecord, java.util.AbstractMap.SimpleEntry<java.time.OffsetDateTime,
                                        java.time.OffsetDateTime>> SYS_PERIOD = createField(DSL.name("sys_period"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tstzrange\"").defaultValue(org.jooq.impl.DSL.field("tstzrange(now(), NULL::timestamp with time zone)", org.jooq.impl.SQLDataType.OTHER)), this, "", new SysPeriodBinder());

    /**
     * The column <code>ehr.status.has_audit</code>.
     */
    public final TableField<StatusRecord, UUID> HAS_AUDIT = createField(DSL.name("has_audit"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.status.attestation_ref</code>.
     */
    public final TableField<StatusRecord, UUID> ATTESTATION_REF = createField(DSL.name("attestation_ref"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.status.in_contribution</code>.
     */
    public final TableField<StatusRecord, UUID> IN_CONTRIBUTION = createField(DSL.name("in_contribution"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.status.archetype_node_id</code>.
     */
    public final TableField<StatusRecord, String> ARCHETYPE_NODE_ID = createField(DSL.name("archetype_node_id"), org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("'openEHR-EHR-EHR_STATUS.generic.v1'::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>ehr.status.name</code>.
     */
    public final TableField<StatusRecord, DvCodedTextRecord> NAME = createField(DSL.name("name"), DvCodedText.DV_CODED_TEXT.getDataType(), this, "");

    /**
     * Create a <code>ehr.status</code> table reference
     */
    public Status() {
        this(DSL.name("status"), null);
    }

    /**
     * Create an aliased <code>ehr.status</code> table reference
     */
    public Status(String alias) {
        this(DSL.name(alias), STATUS);
    }

    /**
     * Create an aliased <code>ehr.status</code> table reference
     */
    public Status(Name alias) {
        this(alias, STATUS);
    }

    private Status(Name alias, Table<StatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private Status(Name alias, Table<StatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Status(Table<O> child, ForeignKey<O, StatusRecord> key) {
        super(child, key, STATUS);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STATUS_EHR_IDX, Indexes.STATUS_PARTY_IDX, Indexes.STATUS_PKEY);
    }

    @Override
    public UniqueKey<StatusRecord> getPrimaryKey() {
        return Keys.STATUS_PKEY;
    }

    @Override
    public List<UniqueKey<StatusRecord>> getKeys() {
        return Arrays.<UniqueKey<StatusRecord>>asList(Keys.STATUS_PKEY);
    }

    @Override
    public List<ForeignKey<StatusRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StatusRecord, ?>>asList(Keys.STATUS__STATUS_EHR_ID_FKEY, Keys.STATUS__STATUS_PARTY_FKEY, Keys.STATUS__STATUS_HAS_AUDIT_FKEY, Keys.STATUS__STATUS_ATTESTATION_REF_FKEY, Keys.STATUS__STATUS_IN_CONTRIBUTION_FKEY);
    }

    public org.ehrbase.jooq.pg.tables.Ehr ehr() {
        return new org.ehrbase.jooq.pg.tables.Ehr(this, Keys.STATUS__STATUS_EHR_ID_FKEY);
    }

    public PartyIdentified partyIdentified() {
        return new PartyIdentified(this, Keys.STATUS__STATUS_PARTY_FKEY);
    }

    public AuditDetails auditDetails() {
        return new AuditDetails(this, Keys.STATUS__STATUS_HAS_AUDIT_FKEY);
    }

    public AttestationRef attestationRef() {
        return new AttestationRef(this, Keys.STATUS__STATUS_ATTESTATION_REF_FKEY);
    }

    public Contribution contribution() {
        return new Contribution(this, Keys.STATUS__STATUS_IN_CONTRIBUTION_FKEY);
    }

    @Override
    public Status as(String alias) {
        return new Status(DSL.name(alias), this);
    }

    @Override
    public Status as(Name alias) {
        return new Status(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Status rename(String name) {
        return new Status(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Status rename(Name name) {
        return new Status(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, UUID, Boolean, Boolean, UUID, ItemStructure, Timestamp, java.util.AbstractMap.SimpleEntry<java.time.OffsetDateTime,
                                        java.time.OffsetDateTime>, UUID, UUID, UUID, String, DvCodedTextRecord> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
