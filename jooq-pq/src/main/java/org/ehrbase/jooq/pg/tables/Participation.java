/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.binding.SysPeriodBinder;
import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.Indexes;
import org.ehrbase.jooq.pg.Keys;
import org.ehrbase.jooq.pg.udt.DvCodedText;
import org.ehrbase.jooq.pg.udt.records.DvCodedTextRecord;
import org.ehrbase.jooq.pg.tables.records.ParticipationRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Participation extends TableImpl<ParticipationRecord> {

    private static final long serialVersionUID = 1664401184;

    /**
     * The reference instance of <code>ehr.participation</code>
     */
    public static final Participation PARTICIPATION = new Participation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParticipationRecord> getRecordType() {
        return ParticipationRecord.class;
    }

    /**
     * The column <code>ehr.participation.id</code>.
     */
    public final TableField<ParticipationRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("uuid_generate_v4()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>ehr.participation.event_context</code>.
     */
    public final TableField<ParticipationRecord, UUID> EVENT_CONTEXT = createField(DSL.name("event_context"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.participation.performer</code>.
     */
    public final TableField<ParticipationRecord, UUID> PERFORMER = createField(DSL.name("performer"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.participation.function</code>.
     */
    public final TableField<ParticipationRecord, DvCodedTextRecord> FUNCTION = createField(DSL.name("function"), DvCodedText.DV_CODED_TEXT.getDataType(), this, "");

    /**
     * The column <code>ehr.participation.mode</code>.
     */
    public final TableField<ParticipationRecord, DvCodedTextRecord> MODE = createField(DSL.name("mode"), DvCodedText.DV_CODED_TEXT.getDataType(), this, "");

    /**
     * The column <code>ehr.participation.time_lower</code>.
     */
    public final TableField<ParticipationRecord, Timestamp> TIME_LOWER = createField(DSL.name("time_lower"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>ehr.participation.time_lower_tz</code>.
     */
    public final TableField<ParticipationRecord, String> TIME_LOWER_TZ = createField(DSL.name("time_lower_tz"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.participation.sys_transaction</code>.
     */
    public final TableField<ParticipationRecord, Timestamp> SYS_TRANSACTION = createField(DSL.name("sys_transaction"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>ehr.participation.sys_period</code>.
     */
    public final TableField<ParticipationRecord, java.util.AbstractMap.SimpleEntry<java.time.OffsetDateTime,
                                        java.time.OffsetDateTime>> SYS_PERIOD = createField(DSL.name("sys_period"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tstzrange\"").defaultValue(org.jooq.impl.DSL.field("tstzrange(now(), NULL::timestamp with time zone)", org.jooq.impl.SQLDataType.OTHER)), this, "", new SysPeriodBinder());

    /**
     * The column <code>ehr.participation.time_upper</code>.
     */
    public final TableField<ParticipationRecord, Timestamp> TIME_UPPER = createField(DSL.name("time_upper"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>ehr.participation.time_upper_tz</code>.
     */
    public final TableField<ParticipationRecord, String> TIME_UPPER_TZ = createField(DSL.name("time_upper_tz"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>ehr.participation</code> table reference
     */
    public Participation() {
        this(DSL.name("participation"), null);
    }

    /**
     * Create an aliased <code>ehr.participation</code> table reference
     */
    public Participation(String alias) {
        this(DSL.name(alias), PARTICIPATION);
    }

    /**
     * Create an aliased <code>ehr.participation</code> table reference
     */
    public Participation(Name alias) {
        this(alias, PARTICIPATION);
    }

    private Participation(Name alias, Table<ParticipationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Participation(Name alias, Table<ParticipationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Participation(Table<O> child, ForeignKey<O, ParticipationRecord> key) {
        super(child, key, PARTICIPATION);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONTEXT_PARTICIPATION_INDEX, Indexes.PARTICIPATION_PKEY);
    }

    @Override
    public UniqueKey<ParticipationRecord> getPrimaryKey() {
        return Keys.PARTICIPATION_PKEY;
    }

    @Override
    public List<UniqueKey<ParticipationRecord>> getKeys() {
        return Arrays.<UniqueKey<ParticipationRecord>>asList(Keys.PARTICIPATION_PKEY);
    }

    @Override
    public List<ForeignKey<ParticipationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ParticipationRecord, ?>>asList(Keys.PARTICIPATION__PARTICIPATION_PERFORMER_FKEY);
    }

    public PartyIdentified partyIdentified() {
        return new PartyIdentified(this, Keys.PARTICIPATION__PARTICIPATION_PERFORMER_FKEY);
    }

    @Override
    public Participation as(String alias) {
        return new Participation(DSL.name(alias), this);
    }

    @Override
    public Participation as(Name alias) {
        return new Participation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Participation rename(String name) {
        return new Participation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Participation rename(Name name) {
        return new Participation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, UUID, UUID, DvCodedTextRecord, DvCodedTextRecord, Timestamp, String, Timestamp, java.util.AbstractMap.SimpleEntry<java.time.OffsetDateTime,
                                        java.time.OffsetDateTime>, Timestamp, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
