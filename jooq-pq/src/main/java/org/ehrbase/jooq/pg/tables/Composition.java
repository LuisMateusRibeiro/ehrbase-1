/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.binding.SysPeriodBinder;
import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.Indexes;
import org.ehrbase.jooq.pg.Keys;
import org.ehrbase.jooq.pg.tables.records.CompositionRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Composition extends TableImpl<CompositionRecord> {

    private static final long serialVersionUID = 840742941;

    /**
     * The reference instance of <code>ehr.composition</code>
     */
    public static final Composition COMPOSITION = new Composition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompositionRecord> getRecordType() {
        return CompositionRecord.class;
    }

    /**
     * The column <code>ehr.composition.id</code>.
     */
    public final TableField<CompositionRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("uuid_generate_v4()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>ehr.composition.ehr_id</code>.
     */
    public final TableField<CompositionRecord, UUID> EHR_ID = createField(DSL.name("ehr_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.composition.in_contribution</code>.
     */
    public final TableField<CompositionRecord, UUID> IN_CONTRIBUTION = createField(DSL.name("in_contribution"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.composition.active</code>.
     */
    public final TableField<CompositionRecord, Boolean> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>ehr.composition.is_persistent</code>.
     */
    public final TableField<CompositionRecord, Boolean> IS_PERSISTENT = createField(DSL.name("is_persistent"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>ehr.composition.language</code>.
     */
    public final TableField<CompositionRecord, String> LANGUAGE = createField(DSL.name("language"), org.jooq.impl.SQLDataType.VARCHAR(5), this, "");

    /**
     * The column <code>ehr.composition.territory</code>.
     */
    public final TableField<CompositionRecord, Integer> TERRITORY = createField(DSL.name("territory"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ehr.composition.composer</code>.
     */
    public final TableField<CompositionRecord, UUID> COMPOSER = createField(DSL.name("composer"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.composition.sys_transaction</code>.
     */
    public final TableField<CompositionRecord, Timestamp> SYS_TRANSACTION = createField(DSL.name("sys_transaction"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>ehr.composition.sys_period</code>.
     */
    public final TableField<CompositionRecord, java.util.AbstractMap.SimpleEntry<java.time.OffsetDateTime,
                                        java.time.OffsetDateTime>> SYS_PERIOD = createField(DSL.name("sys_period"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tstzrange\"").defaultValue(org.jooq.impl.DSL.field("tstzrange(now(), NULL::timestamp with time zone)", org.jooq.impl.SQLDataType.OTHER)), this, "", new SysPeriodBinder());

    /**
     * The column <code>ehr.composition.has_audit</code>.
     */
    public final TableField<CompositionRecord, UUID> HAS_AUDIT = createField(DSL.name("has_audit"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.composition.attestation_ref</code>.
     */
    public final TableField<CompositionRecord, UUID> ATTESTATION_REF = createField(DSL.name("attestation_ref"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.composition.feeder_audit</code>.
     */
    public final TableField<CompositionRecord, JSONB> FEEDER_AUDIT = createField(DSL.name("feeder_audit"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * The column <code>ehr.composition.links</code>.
     */
    public final TableField<CompositionRecord, JSONB> LINKS = createField(DSL.name("links"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * Create a <code>ehr.composition</code> table reference
     */
    public Composition() {
        this(DSL.name("composition"), null);
    }

    /**
     * Create an aliased <code>ehr.composition</code> table reference
     */
    public Composition(String alias) {
        this(DSL.name(alias), COMPOSITION);
    }

    /**
     * Create an aliased <code>ehr.composition</code> table reference
     */
    public Composition(Name alias) {
        this(alias, COMPOSITION);
    }

    private Composition(Name alias, Table<CompositionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Composition(Name alias, Table<CompositionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Composition(Table<O> child, ForeignKey<O, CompositionRecord> key) {
        super(child, key, COMPOSITION);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPOSITION_COMPOSER_IDX, Indexes.COMPOSITION_EHR_IDX, Indexes.COMPOSITION_PKEY);
    }

    @Override
    public UniqueKey<CompositionRecord> getPrimaryKey() {
        return Keys.COMPOSITION_PKEY;
    }

    @Override
    public List<UniqueKey<CompositionRecord>> getKeys() {
        return Arrays.<UniqueKey<CompositionRecord>>asList(Keys.COMPOSITION_PKEY);
    }

    @Override
    public List<ForeignKey<CompositionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CompositionRecord, ?>>asList(Keys.COMPOSITION__COMPOSITION_EHR_ID_FKEY, Keys.COMPOSITION__COMPOSITION_IN_CONTRIBUTION_FKEY, Keys.COMPOSITION__COMPOSITION_LANGUAGE_FKEY, Keys.COMPOSITION__COMPOSITION_TERRITORY_FKEY, Keys.COMPOSITION__COMPOSITION_COMPOSER_FKEY, Keys.COMPOSITION__COMPOSITION_HAS_AUDIT_FKEY, Keys.COMPOSITION__COMPOSITION_ATTESTATION_REF_FKEY);
    }

    public org.ehrbase.jooq.pg.tables.Ehr ehr() {
        return new org.ehrbase.jooq.pg.tables.Ehr(this, Keys.COMPOSITION__COMPOSITION_EHR_ID_FKEY);
    }

    public Contribution contribution() {
        return new Contribution(this, Keys.COMPOSITION__COMPOSITION_IN_CONTRIBUTION_FKEY);
    }

    public Language language() {
        return new Language(this, Keys.COMPOSITION__COMPOSITION_LANGUAGE_FKEY);
    }

    public Territory territory() {
        return new Territory(this, Keys.COMPOSITION__COMPOSITION_TERRITORY_FKEY);
    }

    public PartyIdentified partyIdentified() {
        return new PartyIdentified(this, Keys.COMPOSITION__COMPOSITION_COMPOSER_FKEY);
    }

    public AuditDetails auditDetails() {
        return new AuditDetails(this, Keys.COMPOSITION__COMPOSITION_HAS_AUDIT_FKEY);
    }

    public AttestationRef attestationRef() {
        return new AttestationRef(this, Keys.COMPOSITION__COMPOSITION_ATTESTATION_REF_FKEY);
    }

    @Override
    public Composition as(String alias) {
        return new Composition(DSL.name(alias), this);
    }

    @Override
    public Composition as(Name alias) {
        return new Composition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Composition rename(String name) {
        return new Composition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Composition rename(Name name) {
        return new Composition(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<UUID, UUID, UUID, Boolean, Boolean, String, Integer, UUID, Timestamp, java.util.AbstractMap.SimpleEntry<java.time.OffsetDateTime,
                                        java.time.OffsetDateTime>, UUID, UUID, JSONB, JSONB> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
