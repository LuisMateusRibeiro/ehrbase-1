/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.binding.SysPeriodBinder;
import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.Indexes;
import org.ehrbase.jooq.pg.tables.records.CompositionHistoryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompositionHistory extends TableImpl<CompositionHistoryRecord> {

    private static final long serialVersionUID = 1747791481;

    /**
     * The reference instance of <code>ehr.composition_history</code>
     */
    public static final CompositionHistory COMPOSITION_HISTORY = new CompositionHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompositionHistoryRecord> getRecordType() {
        return CompositionHistoryRecord.class;
    }

    /**
     * The column <code>ehr.composition_history.id</code>.
     */
    public final TableField<CompositionHistoryRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.composition_history.ehr_id</code>.
     */
    public final TableField<CompositionHistoryRecord, UUID> EHR_ID = createField(DSL.name("ehr_id"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.composition_history.in_contribution</code>.
     */
    public final TableField<CompositionHistoryRecord, UUID> IN_CONTRIBUTION = createField(DSL.name("in_contribution"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.composition_history.active</code>.
     */
    public final TableField<CompositionHistoryRecord, Boolean> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>ehr.composition_history.is_persistent</code>.
     */
    public final TableField<CompositionHistoryRecord, Boolean> IS_PERSISTENT = createField(DSL.name("is_persistent"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>ehr.composition_history.language</code>.
     */
    public final TableField<CompositionHistoryRecord, String> LANGUAGE = createField(DSL.name("language"), org.jooq.impl.SQLDataType.VARCHAR(5), this, "");

    /**
     * The column <code>ehr.composition_history.territory</code>.
     */
    public final TableField<CompositionHistoryRecord, Integer> TERRITORY = createField(DSL.name("territory"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ehr.composition_history.composer</code>.
     */
    public final TableField<CompositionHistoryRecord, UUID> COMPOSER = createField(DSL.name("composer"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.composition_history.sys_transaction</code>.
     */
    public final TableField<CompositionHistoryRecord, Timestamp> SYS_TRANSACTION = createField(DSL.name("sys_transaction"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>ehr.composition_history.sys_period</code>.
     */
    public final TableField<CompositionHistoryRecord, java.util.AbstractMap.SimpleEntry<java.time.OffsetDateTime,
                                        java.time.OffsetDateTime>> SYS_PERIOD = createField(DSL.name("sys_period"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tstzrange\"").nullable(false), this, "", new SysPeriodBinder());

    /**
     * The column <code>ehr.composition_history.has_audit</code>.
     */
    public final TableField<CompositionHistoryRecord, UUID> HAS_AUDIT = createField(DSL.name("has_audit"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.composition_history.attestation_ref</code>.
     */
    public final TableField<CompositionHistoryRecord, UUID> ATTESTATION_REF = createField(DSL.name("attestation_ref"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.composition_history.feeder_audit</code>.
     */
    public final TableField<CompositionHistoryRecord, JSONB> FEEDER_AUDIT = createField(DSL.name("feeder_audit"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * The column <code>ehr.composition_history.links</code>.
     */
    public final TableField<CompositionHistoryRecord, JSONB> LINKS = createField(DSL.name("links"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * Create a <code>ehr.composition_history</code> table reference
     */
    public CompositionHistory() {
        this(DSL.name("composition_history"), null);
    }

    /**
     * Create an aliased <code>ehr.composition_history</code> table reference
     */
    public CompositionHistory(String alias) {
        this(DSL.name(alias), COMPOSITION_HISTORY);
    }

    /**
     * Create an aliased <code>ehr.composition_history</code> table reference
     */
    public CompositionHistory(Name alias) {
        this(alias, COMPOSITION_HISTORY);
    }

    private CompositionHistory(Name alias, Table<CompositionHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompositionHistory(Name alias, Table<CompositionHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CompositionHistory(Table<O> child, ForeignKey<O, CompositionHistoryRecord> key) {
        super(child, key, COMPOSITION_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPOSITION_HISTORY_EHR_IDX, Indexes.EHR_COMPOSITION_HISTORY);
    }

    @Override
    public CompositionHistory as(String alias) {
        return new CompositionHistory(DSL.name(alias), this);
    }

    @Override
    public CompositionHistory as(Name alias) {
        return new CompositionHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompositionHistory rename(String name) {
        return new CompositionHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompositionHistory rename(Name name) {
        return new CompositionHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<UUID, UUID, UUID, Boolean, Boolean, String, Integer, UUID, Timestamp, java.util.AbstractMap.SimpleEntry<java.time.OffsetDateTime,
                                        java.time.OffsetDateTime>, UUID, UUID, JSONB, JSONB> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
