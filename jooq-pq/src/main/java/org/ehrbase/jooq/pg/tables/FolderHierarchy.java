/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.binding.SysPeriodBinder;
import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.Indexes;
import org.ehrbase.jooq.pg.Keys;
import org.ehrbase.jooq.pg.tables.records.FolderHierarchyRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FolderHierarchy extends TableImpl<FolderHierarchyRecord> {

    private static final long serialVersionUID = -1787444000;

    /**
     * The reference instance of <code>ehr.folder_hierarchy</code>
     */
    public static final FolderHierarchy FOLDER_HIERARCHY = new FolderHierarchy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FolderHierarchyRecord> getRecordType() {
        return FolderHierarchyRecord.class;
    }

    /**
     * The column <code>ehr.folder_hierarchy.parent_folder</code>.
     */
    public final TableField<FolderHierarchyRecord, UUID> PARENT_FOLDER = createField(DSL.name("parent_folder"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.folder_hierarchy.child_folder</code>.
     */
    public final TableField<FolderHierarchyRecord, UUID> CHILD_FOLDER = createField(DSL.name("child_folder"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.folder_hierarchy.in_contribution</code>.
     */
    public final TableField<FolderHierarchyRecord, UUID> IN_CONTRIBUTION = createField(DSL.name("in_contribution"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.folder_hierarchy.sys_transaction</code>.
     */
    public final TableField<FolderHierarchyRecord, Timestamp> SYS_TRANSACTION = createField(DSL.name("sys_transaction"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>ehr.folder_hierarchy.sys_period</code>.
     */
    public final TableField<FolderHierarchyRecord, java.util.AbstractMap.SimpleEntry<java.time.OffsetDateTime,
                                        java.time.OffsetDateTime>> SYS_PERIOD = createField(DSL.name("sys_period"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tstzrange\"").nullable(false), this, "", new SysPeriodBinder());

    /**
     * Create a <code>ehr.folder_hierarchy</code> table reference
     */
    public FolderHierarchy() {
        this(DSL.name("folder_hierarchy"), null);
    }

    /**
     * Create an aliased <code>ehr.folder_hierarchy</code> table reference
     */
    public FolderHierarchy(String alias) {
        this(DSL.name(alias), FOLDER_HIERARCHY);
    }

    /**
     * Create an aliased <code>ehr.folder_hierarchy</code> table reference
     */
    public FolderHierarchy(Name alias) {
        this(alias, FOLDER_HIERARCHY);
    }

    private FolderHierarchy(Name alias, Table<FolderHierarchyRecord> aliased) {
        this(alias, aliased, null);
    }

    private FolderHierarchy(Name alias, Table<FolderHierarchyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> FolderHierarchy(Table<O> child, ForeignKey<O, FolderHierarchyRecord> key) {
        super(child, key, FOLDER_HIERARCHY);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FKI_FOLDER_HIERARCHY_PARENT_FK, Indexes.FOLDER_HIERARCHY_IN_CONTRIBUTION_IDX, Indexes.FOLDER_HIERARCHY_PKEY, Indexes.UQ_FOLDERHIERARCHY_PARENT_CHILD);
    }

    @Override
    public UniqueKey<FolderHierarchyRecord> getPrimaryKey() {
        return Keys.FOLDER_HIERARCHY_PKEY;
    }

    @Override
    public List<UniqueKey<FolderHierarchyRecord>> getKeys() {
        return Arrays.<UniqueKey<FolderHierarchyRecord>>asList(Keys.FOLDER_HIERARCHY_PKEY, Keys.UQ_FOLDERHIERARCHY_PARENT_CHILD);
    }

    @Override
    public List<ForeignKey<FolderHierarchyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FolderHierarchyRecord, ?>>asList(Keys.FOLDER_HIERARCHY__FOLDER_HIERARCHY_PARENT_FK, Keys.FOLDER_HIERARCHY__FOLDER_HIERARCHY_IN_CONTRIBUTION_FK);
    }

    public Folder folder() {
        return new Folder(this, Keys.FOLDER_HIERARCHY__FOLDER_HIERARCHY_PARENT_FK);
    }

    public Contribution contribution() {
        return new Contribution(this, Keys.FOLDER_HIERARCHY__FOLDER_HIERARCHY_IN_CONTRIBUTION_FK);
    }

    @Override
    public FolderHierarchy as(String alias) {
        return new FolderHierarchy(DSL.name(alias), this);
    }

    @Override
    public FolderHierarchy as(Name alias) {
        return new FolderHierarchy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FolderHierarchy rename(String name) {
        return new FolderHierarchy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FolderHierarchy rename(Name name) {
        return new FolderHierarchy(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, UUID, Timestamp, java.util.AbstractMap.SimpleEntry<java.time.OffsetDateTime,
                                        java.time.OffsetDateTime>> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
