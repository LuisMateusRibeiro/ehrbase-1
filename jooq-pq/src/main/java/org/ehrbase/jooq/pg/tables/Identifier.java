/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.Keys;
import org.ehrbase.jooq.pg.tables.records.IdentifierRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Identifier extends TableImpl<IdentifierRecord> {

    private static final long serialVersionUID = 1062939199;

    /**
     * The reference instance of <code>ehr.identifier</code>
     */
    public static final Identifier IDENTIFIER = new Identifier();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IdentifierRecord> getRecordType() {
        return IdentifierRecord.class;
    }

    /**
     * The column <code>ehr.identifier.id_value</code>.
     */
    public final TableField<IdentifierRecord, String> ID_VALUE = createField(DSL.name("id_value"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.identifier.issuer</code>.
     */
    public final TableField<IdentifierRecord, String> ISSUER = createField(DSL.name("issuer"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.identifier.assigner</code>.
     */
    public final TableField<IdentifierRecord, String> ASSIGNER = createField(DSL.name("assigner"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.identifier.type_name</code>.
     */
    public final TableField<IdentifierRecord, String> TYPE_NAME = createField(DSL.name("type_name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.identifier.party</code>.
     */
    public final TableField<IdentifierRecord, UUID> PARTY = createField(DSL.name("party"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>ehr.identifier</code> table reference
     */
    public Identifier() {
        this(DSL.name("identifier"), null);
    }

    /**
     * Create an aliased <code>ehr.identifier</code> table reference
     */
    public Identifier(String alias) {
        this(DSL.name(alias), IDENTIFIER);
    }

    /**
     * Create an aliased <code>ehr.identifier</code> table reference
     */
    public Identifier(Name alias) {
        this(alias, IDENTIFIER);
    }

    private Identifier(Name alias, Table<IdentifierRecord> aliased) {
        this(alias, aliased, null);
    }

    private Identifier(Name alias, Table<IdentifierRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Identifier(Table<O> child, ForeignKey<O, IdentifierRecord> key) {
        super(child, key, IDENTIFIER);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public List<ForeignKey<IdentifierRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IdentifierRecord, ?>>asList(Keys.IDENTIFIER__IDENTIFIER_PARTY_FKEY);
    }

    public PartyIdentified partyIdentified() {
        return new PartyIdentified(this, Keys.IDENTIFIER__IDENTIFIER_PARTY_FKEY);
    }

    @Override
    public Identifier as(String alias) {
        return new Identifier(DSL.name(alias), this);
    }

    @Override
    public Identifier as(Name alias) {
        return new Identifier(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Identifier rename(String name) {
        return new Identifier(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Identifier rename(Name name) {
        return new Identifier(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, UUID> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
