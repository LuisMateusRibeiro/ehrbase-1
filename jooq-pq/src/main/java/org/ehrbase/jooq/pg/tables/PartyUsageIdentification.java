/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.tables.records.PartyUsageIdentificationRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PartyUsageIdentification extends TableImpl<PartyUsageIdentificationRecord> {

    private static final long serialVersionUID = -50895480;

    /**
     * The reference instance of <code>ehr.party_usage_identification</code>
     */
    public static final PartyUsageIdentification PARTY_USAGE_IDENTIFICATION = new PartyUsageIdentification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartyUsageIdentificationRecord> getRecordType() {
        return PartyUsageIdentificationRecord.class;
    }

    /**
     * The column <code>ehr.party_usage_identification.id</code>.
     */
    public final TableField<PartyUsageIdentificationRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.party_usage_identification.entity</code>.
     */
    public final TableField<PartyUsageIdentificationRecord, String> ENTITY = createField(DSL.name("entity"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>ehr.party_usage_identification</code> table reference
     */
    public PartyUsageIdentification() {
        this(DSL.name("party_usage_identification"), null);
    }

    /**
     * Create an aliased <code>ehr.party_usage_identification</code> table reference
     */
    public PartyUsageIdentification(String alias) {
        this(DSL.name(alias), PARTY_USAGE_IDENTIFICATION);
    }

    /**
     * Create an aliased <code>ehr.party_usage_identification</code> table reference
     */
    public PartyUsageIdentification(Name alias) {
        this(alias, PARTY_USAGE_IDENTIFICATION);
    }

    private PartyUsageIdentification(Name alias, Table<PartyUsageIdentificationRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private PartyUsageIdentification(Name alias, Table<PartyUsageIdentificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PartyUsageIdentification(Table<O> child, ForeignKey<O, PartyUsageIdentificationRecord> key) {
        super(child, key, PARTY_USAGE_IDENTIFICATION);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public PartyUsageIdentification as(String alias) {
        return new PartyUsageIdentification(DSL.name(alias), this, parameters);
    }

    @Override
    public PartyUsageIdentification as(Name alias) {
        return new PartyUsageIdentification(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PartyUsageIdentification rename(String name) {
        return new PartyUsageIdentification(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PartyUsageIdentification rename(Name name) {
        return new PartyUsageIdentification(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public PartyUsageIdentification call(UUID partyUuid) {
        return new PartyUsageIdentification(DSL.name(getName()), null, new Field[] { 
              DSL.val(partyUuid, org.jooq.impl.SQLDataType.UUID)
        });
    }

    /**
     * Call this table-valued function
     */
    public PartyUsageIdentification call(Field<UUID> partyUuid) {
        return new PartyUsageIdentification(DSL.name(getName()), null, new Field[] { 
              partyUuid
        });
    }
}
