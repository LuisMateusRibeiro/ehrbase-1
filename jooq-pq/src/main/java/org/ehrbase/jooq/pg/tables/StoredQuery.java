/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.Indexes;
import org.ehrbase.jooq.pg.Keys;
import org.ehrbase.jooq.pg.tables.records.StoredQueryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoredQuery extends TableImpl<StoredQueryRecord> {

    private static final long serialVersionUID = 745854603;

    /**
     * The reference instance of <code>ehr.stored_query</code>
     */
    public static final StoredQuery STORED_QUERY = new StoredQuery();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StoredQueryRecord> getRecordType() {
        return StoredQueryRecord.class;
    }

    /**
     * The column <code>ehr.stored_query.reverse_domain_name</code>.
     */
    public final TableField<StoredQueryRecord, String> REVERSE_DOMAIN_NAME = createField(DSL.name("reverse_domain_name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>ehr.stored_query.semantic_id</code>.
     */
    public final TableField<StoredQueryRecord, String> SEMANTIC_ID = createField(DSL.name("semantic_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>ehr.stored_query.semver</code>.
     */
    public final TableField<StoredQueryRecord, String> SEMVER = createField(DSL.name("semver"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).defaultValue(org.jooq.impl.DSL.field("'0.0.0'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ehr.stored_query.query_text</code>.
     */
    public final TableField<StoredQueryRecord, String> QUERY_TEXT = createField(DSL.name("query_text"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>ehr.stored_query.creation_date</code>.
     */
    public final TableField<StoredQueryRecord, Timestamp> CREATION_DATE = createField(DSL.name("creation_date"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>ehr.stored_query.type</code>.
     */
    public final TableField<StoredQueryRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("'AQL'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>ehr.stored_query</code> table reference
     */
    public StoredQuery() {
        this(DSL.name("stored_query"), null);
    }

    /**
     * Create an aliased <code>ehr.stored_query</code> table reference
     */
    public StoredQuery(String alias) {
        this(DSL.name(alias), STORED_QUERY);
    }

    /**
     * Create an aliased <code>ehr.stored_query</code> table reference
     */
    public StoredQuery(Name alias) {
        this(alias, STORED_QUERY);
    }

    private StoredQuery(Name alias, Table<StoredQueryRecord> aliased) {
        this(alias, aliased, null);
    }

    private StoredQuery(Name alias, Table<StoredQueryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> StoredQuery(Table<O> child, ForeignKey<O, StoredQueryRecord> key) {
        super(child, key, STORED_QUERY);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_QUALIFIED_NAME);
    }

    @Override
    public UniqueKey<StoredQueryRecord> getPrimaryKey() {
        return Keys.PK_QUALIFIED_NAME;
    }

    @Override
    public List<UniqueKey<StoredQueryRecord>> getKeys() {
        return Arrays.<UniqueKey<StoredQueryRecord>>asList(Keys.PK_QUALIFIED_NAME);
    }

    @Override
    public StoredQuery as(String alias) {
        return new StoredQuery(DSL.name(alias), this);
    }

    @Override
    public StoredQuery as(Name alias) {
        return new StoredQuery(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StoredQuery rename(String name) {
        return new StoredQuery(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StoredQuery rename(Name name) {
        return new StoredQuery(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, Timestamp, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
