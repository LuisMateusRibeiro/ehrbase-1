/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.binding.SysPeriodBinder;
import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.Indexes;
import org.ehrbase.jooq.pg.enums.EntryType;
import org.ehrbase.jooq.pg.udt.DvCodedText;
import org.ehrbase.jooq.pg.udt.records.DvCodedTextRecord;
import org.ehrbase.jooq.pg.tables.records.EntryHistoryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EntryHistory extends TableImpl<EntryHistoryRecord> {

    private static final long serialVersionUID = -364825227;

    /**
     * The reference instance of <code>ehr.entry_history</code>
     */
    public static final EntryHistory ENTRY_HISTORY = new EntryHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntryHistoryRecord> getRecordType() {
        return EntryHistoryRecord.class;
    }

    /**
     * The column <code>ehr.entry_history.id</code>.
     */
    public final TableField<EntryHistoryRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.entry_history.composition_id</code>.
     */
    public final TableField<EntryHistoryRecord, UUID> COMPOSITION_ID = createField(DSL.name("composition_id"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.entry_history.sequence</code>.
     */
    public final TableField<EntryHistoryRecord, Integer> SEQUENCE = createField(DSL.name("sequence"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ehr.entry_history.item_type</code>.
     */
    public final TableField<EntryHistoryRecord, EntryType> ITEM_TYPE = createField(DSL.name("item_type"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(EntryType.class), this, "");

    /**
     * The column <code>ehr.entry_history.template_id</code>.
     */
    public final TableField<EntryHistoryRecord, String> TEMPLATE_ID = createField(DSL.name("template_id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.entry_history.template_uuid</code>.
     */
    public final TableField<EntryHistoryRecord, UUID> TEMPLATE_UUID = createField(DSL.name("template_uuid"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.entry_history.archetype_id</code>.
     */
    public final TableField<EntryHistoryRecord, String> ARCHETYPE_ID = createField(DSL.name("archetype_id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.entry_history.category</code>.
     */
    public final TableField<EntryHistoryRecord, DvCodedTextRecord> CATEGORY = createField(DSL.name("category"), DvCodedText.DV_CODED_TEXT.getDataType(), this, "");

    /**
     * The column <code>ehr.entry_history.entry</code>.
     */
    public final TableField<EntryHistoryRecord, JSONB> ENTRY = createField(DSL.name("entry"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * The column <code>ehr.entry_history.sys_transaction</code>.
     */
    public final TableField<EntryHistoryRecord, Timestamp> SYS_TRANSACTION = createField(DSL.name("sys_transaction"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>ehr.entry_history.sys_period</code>.
     */
    public final TableField<EntryHistoryRecord, java.util.AbstractMap.SimpleEntry<java.time.OffsetDateTime,
                                        java.time.OffsetDateTime>> SYS_PERIOD = createField(DSL.name("sys_period"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tstzrange\"").nullable(false), this, "", new SysPeriodBinder());

    /**
     * The column <code>ehr.entry_history.rm_version</code>.
     */
    public final TableField<EntryHistoryRecord, String> RM_VERSION = createField(DSL.name("rm_version"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.entry_history.name</code>.
     */
    public final TableField<EntryHistoryRecord, DvCodedTextRecord> NAME = createField(DSL.name("name"), DvCodedText.DV_CODED_TEXT.getDataType(), this, "");

    /**
     * Create a <code>ehr.entry_history</code> table reference
     */
    public EntryHistory() {
        this(DSL.name("entry_history"), null);
    }

    /**
     * Create an aliased <code>ehr.entry_history</code> table reference
     */
    public EntryHistory(String alias) {
        this(DSL.name(alias), ENTRY_HISTORY);
    }

    /**
     * Create an aliased <code>ehr.entry_history</code> table reference
     */
    public EntryHistory(Name alias) {
        this(alias, ENTRY_HISTORY);
    }

    private EntryHistory(Name alias, Table<EntryHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private EntryHistory(Name alias, Table<EntryHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> EntryHistory(Table<O> child, ForeignKey<O, EntryHistoryRecord> key) {
        super(child, key, ENTRY_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EHR_ENTRY_HISTORY, Indexes.ENTRY_HISTORY_COMPOSITION_IDX);
    }

    @Override
    public EntryHistory as(String alias) {
        return new EntryHistory(DSL.name(alias), this);
    }

    @Override
    public EntryHistory as(Name alias) {
        return new EntryHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntryHistory rename(String name) {
        return new EntryHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntryHistory rename(Name name) {
        return new EntryHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, UUID, Integer, EntryType, String, UUID, String, DvCodedTextRecord, JSONB, Timestamp, java.util.AbstractMap.SimpleEntry<java.time.OffsetDateTime,
                                        java.time.OffsetDateTime>, String, DvCodedTextRecord> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
