/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.tables.records.AdminDeleteEhrRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminDeleteEhr extends TableImpl<AdminDeleteEhrRecord> {

    private static final long serialVersionUID = -1989412248;

    /**
     * The reference instance of <code>ehr.admin_delete_ehr</code>
     */
    public static final AdminDeleteEhr ADMIN_DELETE_EHR = new AdminDeleteEhr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminDeleteEhrRecord> getRecordType() {
        return AdminDeleteEhrRecord.class;
    }

    /**
     * The column <code>ehr.admin_delete_ehr.num</code>.
     */
    public final TableField<AdminDeleteEhrRecord, Integer> NUM = createField(DSL.name("num"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ehr.admin_delete_ehr.status_audit</code>.
     */
    public final TableField<AdminDeleteEhrRecord, UUID> STATUS_AUDIT = createField(DSL.name("status_audit"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.admin_delete_ehr.status_party</code>.
     */
    public final TableField<AdminDeleteEhrRecord, UUID> STATUS_PARTY = createField(DSL.name("status_party"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * Create a <code>ehr.admin_delete_ehr</code> table reference
     */
    public AdminDeleteEhr() {
        this(DSL.name("admin_delete_ehr"), null);
    }

    /**
     * Create an aliased <code>ehr.admin_delete_ehr</code> table reference
     */
    public AdminDeleteEhr(String alias) {
        this(DSL.name(alias), ADMIN_DELETE_EHR);
    }

    /**
     * Create an aliased <code>ehr.admin_delete_ehr</code> table reference
     */
    public AdminDeleteEhr(Name alias) {
        this(alias, ADMIN_DELETE_EHR);
    }

    private AdminDeleteEhr(Name alias, Table<AdminDeleteEhrRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private AdminDeleteEhr(Name alias, Table<AdminDeleteEhrRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AdminDeleteEhr(Table<O> child, ForeignKey<O, AdminDeleteEhrRecord> key) {
        super(child, key, ADMIN_DELETE_EHR);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public AdminDeleteEhr as(String alias) {
        return new AdminDeleteEhr(DSL.name(alias), this, parameters);
    }

    @Override
    public AdminDeleteEhr as(Name alias) {
        return new AdminDeleteEhr(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminDeleteEhr rename(String name) {
        return new AdminDeleteEhr(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminDeleteEhr rename(Name name) {
        return new AdminDeleteEhr(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public AdminDeleteEhr call(UUID ehrIdInput) {
        return new AdminDeleteEhr(DSL.name(getName()), null, new Field[] { 
              DSL.val(ehrIdInput, org.jooq.impl.SQLDataType.UUID)
        });
    }

    /**
     * Call this table-valued function
     */
    public AdminDeleteEhr call(Field<UUID> ehrIdInput) {
        return new AdminDeleteEhr(DSL.name(getName()), null, new Field[] { 
              ehrIdInput
        });
    }
}
