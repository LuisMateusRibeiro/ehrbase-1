/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.Indexes;
import org.ehrbase.jooq.pg.Keys;
import org.ehrbase.jooq.pg.enums.ContributionChangeType;
import org.ehrbase.jooq.pg.tables.records.AuditDetailsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditDetails extends TableImpl<AuditDetailsRecord> {

    private static final long serialVersionUID = 1789448807;

    /**
     * The reference instance of <code>ehr.audit_details</code>
     */
    public static final AuditDetails AUDIT_DETAILS = new AuditDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditDetailsRecord> getRecordType() {
        return AuditDetailsRecord.class;
    }

    /**
     * The column <code>ehr.audit_details.id</code>.
     */
    public final TableField<AuditDetailsRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("uuid_generate_v4()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>ehr.audit_details.system_id</code>.
     */
    public final TableField<AuditDetailsRecord, UUID> SYSTEM_ID = createField(DSL.name("system_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.audit_details.committer</code>.
     */
    public final TableField<AuditDetailsRecord, UUID> COMMITTER = createField(DSL.name("committer"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>ehr.audit_details.time_committed</code>.
     */
    public final TableField<AuditDetailsRecord, Timestamp> TIME_COMMITTED = createField(DSL.name("time_committed"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>ehr.audit_details.time_committed_tzid</code>.
     */
    public final TableField<AuditDetailsRecord, String> TIME_COMMITTED_TZID = createField(DSL.name("time_committed_tzid"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ehr.audit_details.change_type</code>.
     */
    public final TableField<AuditDetailsRecord, ContributionChangeType> CHANGE_TYPE = createField(DSL.name("change_type"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(ContributionChangeType.class), this, "");

    /**
     * The column <code>ehr.audit_details.description</code>.
     */
    public final TableField<AuditDetailsRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>ehr.audit_details</code> table reference
     */
    public AuditDetails() {
        this(DSL.name("audit_details"), null);
    }

    /**
     * Create an aliased <code>ehr.audit_details</code> table reference
     */
    public AuditDetails(String alias) {
        this(DSL.name(alias), AUDIT_DETAILS);
    }

    /**
     * Create an aliased <code>ehr.audit_details</code> table reference
     */
    public AuditDetails(Name alias) {
        this(alias, AUDIT_DETAILS);
    }

    private AuditDetails(Name alias, Table<AuditDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditDetails(Name alias, Table<AuditDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AuditDetails(Table<O> child, ForeignKey<O, AuditDetailsRecord> key) {
        super(child, key, AUDIT_DETAILS);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUDIT_DETAILS_PKEY);
    }

    @Override
    public UniqueKey<AuditDetailsRecord> getPrimaryKey() {
        return Keys.AUDIT_DETAILS_PKEY;
    }

    @Override
    public List<UniqueKey<AuditDetailsRecord>> getKeys() {
        return Arrays.<UniqueKey<AuditDetailsRecord>>asList(Keys.AUDIT_DETAILS_PKEY);
    }

    @Override
    public List<ForeignKey<AuditDetailsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AuditDetailsRecord, ?>>asList(Keys.AUDIT_DETAILS__AUDIT_DETAILS_SYSTEM_ID_FKEY, Keys.AUDIT_DETAILS__AUDIT_DETAILS_COMMITTER_FKEY);
    }

    public System system() {
        return new System(this, Keys.AUDIT_DETAILS__AUDIT_DETAILS_SYSTEM_ID_FKEY);
    }

    public PartyIdentified partyIdentified() {
        return new PartyIdentified(this, Keys.AUDIT_DETAILS__AUDIT_DETAILS_COMMITTER_FKEY);
    }

    @Override
    public AuditDetails as(String alias) {
        return new AuditDetails(DSL.name(alias), this);
    }

    @Override
    public AuditDetails as(Name alias) {
        return new AuditDetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditDetails rename(String name) {
        return new AuditDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditDetails rename(Name name) {
        return new AuditDetails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, Timestamp, String, ContributionChangeType, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
