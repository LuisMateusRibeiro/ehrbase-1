/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.util.UUID;

import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.tables.records.AdminGetLinkedCompositionsRecord;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminGetLinkedCompositions extends TableImpl<AdminGetLinkedCompositionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ehr.admin_get_linked_compositions</code>
     */
    public static final AdminGetLinkedCompositions ADMIN_GET_LINKED_COMPOSITIONS = new AdminGetLinkedCompositions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminGetLinkedCompositionsRecord> getRecordType() {
        return AdminGetLinkedCompositionsRecord.class;
    }

    /**
     * The column <code>ehr.admin_get_linked_compositions.composition</code>.
     */
    public final TableField<AdminGetLinkedCompositionsRecord, UUID> COMPOSITION = createField(DSL.name("composition"), SQLDataType.UUID, this, "");

    private AdminGetLinkedCompositions(Name alias, Table<AdminGetLinkedCompositionsRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.UUID)
        });
    }

    private AdminGetLinkedCompositions(Name alias, Table<AdminGetLinkedCompositionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>ehr.admin_get_linked_compositions</code> table
     * reference
     */
    public AdminGetLinkedCompositions(String alias) {
        this(DSL.name(alias), ADMIN_GET_LINKED_COMPOSITIONS);
    }

    /**
     * Create an aliased <code>ehr.admin_get_linked_compositions</code> table
     * reference
     */
    public AdminGetLinkedCompositions(Name alias) {
        this(alias, ADMIN_GET_LINKED_COMPOSITIONS);
    }

    /**
     * Create a <code>ehr.admin_get_linked_compositions</code> table reference
     */
    public AdminGetLinkedCompositions() {
        this(DSL.name("admin_get_linked_compositions"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Ehr.EHR;
    }

    @Override
    public AdminGetLinkedCompositions as(String alias) {
        return new AdminGetLinkedCompositions(DSL.name(alias), this, parameters);
    }

    @Override
    public AdminGetLinkedCompositions as(Name alias) {
        return new AdminGetLinkedCompositions(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminGetLinkedCompositions rename(String name) {
        return new AdminGetLinkedCompositions(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminGetLinkedCompositions rename(Name name) {
        return new AdminGetLinkedCompositions(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<UUID> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public AdminGetLinkedCompositions call(
          UUID ehrIdInput
    ) {
        AdminGetLinkedCompositions result = new AdminGetLinkedCompositions(DSL.name("admin_get_linked_compositions"), null, new Field[] {
            DSL.val(ehrIdInput, SQLDataType.UUID)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public AdminGetLinkedCompositions call(
          Field<UUID> ehrIdInput
    ) {
        AdminGetLinkedCompositions result = new AdminGetLinkedCompositions(DSL.name("admin_get_linked_compositions"), null, new Field[] {
            ehrIdInput
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
