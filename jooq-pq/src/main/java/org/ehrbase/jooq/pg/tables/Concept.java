/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.Indexes;
import org.ehrbase.jooq.pg.Keys;
import org.ehrbase.jooq.pg.tables.records.ConceptRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Concept extends TableImpl<ConceptRecord> {

    private static final long serialVersionUID = -897774602;

    /**
     * The reference instance of <code>ehr.concept</code>
     */
    public static final Concept CONCEPT = new Concept();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConceptRecord> getRecordType() {
        return ConceptRecord.class;
    }

    /**
     * The column <code>ehr.concept.id</code>.
     */
    public final TableField<ConceptRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("uuid_generate_v4()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>ehr.concept.conceptid</code>.
     */
    public final TableField<ConceptRecord, Integer> CONCEPTID = createField(DSL.name("conceptid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ehr.concept.language</code>.
     */
    public final TableField<ConceptRecord, String> LANGUAGE = createField(DSL.name("language"), org.jooq.impl.SQLDataType.VARCHAR(5), this, "");

    /**
     * The column <code>ehr.concept.description</code>.
     */
    public final TableField<ConceptRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>ehr.concept</code> table reference
     */
    public Concept() {
        this(DSL.name("concept"), null);
    }

    /**
     * Create an aliased <code>ehr.concept</code> table reference
     */
    public Concept(String alias) {
        this(DSL.name(alias), CONCEPT);
    }

    /**
     * Create an aliased <code>ehr.concept</code> table reference
     */
    public Concept(Name alias) {
        this(alias, CONCEPT);
    }

    private Concept(Name alias, Table<ConceptRecord> aliased) {
        this(alias, aliased, null);
    }

    private Concept(Name alias, Table<ConceptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Concept(Table<O> child, ForeignKey<O, ConceptRecord> key) {
        super(child, key, CONCEPT);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONCEPT_PKEY);
    }

    @Override
    public UniqueKey<ConceptRecord> getPrimaryKey() {
        return Keys.CONCEPT_PKEY;
    }

    @Override
    public List<UniqueKey<ConceptRecord>> getKeys() {
        return Arrays.<UniqueKey<ConceptRecord>>asList(Keys.CONCEPT_PKEY);
    }

    @Override
    public List<ForeignKey<ConceptRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ConceptRecord, ?>>asList(Keys.CONCEPT__CONCEPT_LANGUAGE_FKEY);
    }

    public Language language() {
        return new Language(this, Keys.CONCEPT__CONCEPT_LANGUAGE_FKEY);
    }

    @Override
    public Concept as(String alias) {
        return new Concept(DSL.name(alias), this);
    }

    @Override
    public Concept as(Name alias) {
        return new Concept(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Concept rename(String name) {
        return new Concept(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Concept rename(Name name) {
        return new Concept(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
