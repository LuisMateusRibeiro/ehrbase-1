/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.routines;


import javax.annotation.processing.Generated;

import org.ehrbase.jooq.pg.Ehr;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.impl.Internal;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JsCanonicalPartyRef extends AbstractRoutine<JSON> {

    private static final long serialVersionUID = -577230204;

    /**
     * The parameter <code>ehr.js_canonical_party_ref.RETURN_VALUE</code>.
     */
    public static final Parameter<JSON> RETURN_VALUE = Internal.createParameter("RETURN_VALUE", org.jooq.impl.SQLDataType.JSON, false, false);

    /**
     * The parameter <code>ehr.js_canonical_party_ref.namespace</code>.
     */
    public static final Parameter<String> NAMESPACE = Internal.createParameter("namespace", org.jooq.impl.SQLDataType.CLOB, false, false);

    /**
     * The parameter <code>ehr.js_canonical_party_ref.type</code>.
     */
    public static final Parameter<String> TYPE = Internal.createParameter("type", org.jooq.impl.SQLDataType.CLOB, false, false);

    /**
     * The parameter <code>ehr.js_canonical_party_ref.scheme</code>.
     */
    public static final Parameter<String> SCHEME = Internal.createParameter("scheme", org.jooq.impl.SQLDataType.CLOB, false, false);

    /**
     * The parameter <code>ehr.js_canonical_party_ref.id</code>.
     */
    public static final Parameter<String> ID = Internal.createParameter("id", org.jooq.impl.SQLDataType.CLOB, false, false);

    /**
     * Create a new routine call instance
     */
    public JsCanonicalPartyRef() {
        super("js_canonical_party_ref", Ehr.EHR, org.jooq.impl.SQLDataType.JSON);

        setReturnParameter(RETURN_VALUE);
        addInParameter(NAMESPACE);
        addInParameter(TYPE);
        addInParameter(SCHEME);
        addInParameter(ID);
    }

    /**
     * Set the <code>namespace</code> parameter IN value to the routine
     */
    public void setNamespace(String value) {
        setValue(NAMESPACE, value);
    }

    /**
     * Set the <code>namespace</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setNamespace(Field<String> field) {
        setField(NAMESPACE, field);
    }

    /**
     * Set the <code>type</code> parameter IN value to the routine
     */
    public void setType(String value) {
        setValue(TYPE, value);
    }

    /**
     * Set the <code>type</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setType(Field<String> field) {
        setField(TYPE, field);
    }

    /**
     * Set the <code>scheme</code> parameter IN value to the routine
     */
    public void setScheme(String value) {
        setValue(SCHEME, value);
    }

    /**
     * Set the <code>scheme</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setScheme(Field<String> field) {
        setField(SCHEME, field);
    }

    /**
     * Set the <code>id</code> parameter IN value to the routine
     */
    public void setId(String value) {
        setValue(ID, value);
    }

    /**
     * Set the <code>id</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setId(Field<String> field) {
        setField(ID, field);
    }
}
