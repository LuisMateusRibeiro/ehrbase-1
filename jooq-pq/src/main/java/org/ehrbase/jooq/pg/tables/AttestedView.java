/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.Indexes;
import org.ehrbase.jooq.pg.Keys;
import org.ehrbase.jooq.pg.tables.records.AttestedViewRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AttestedView extends TableImpl<AttestedViewRecord> {

    private static final long serialVersionUID = -880451997;

    /**
     * The reference instance of <code>ehr.attested_view</code>
     */
    public static final AttestedView ATTESTED_VIEW = new AttestedView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttestedViewRecord> getRecordType() {
        return AttestedViewRecord.class;
    }

    /**
     * The column <code>ehr.attested_view.id</code>.
     */
    public final TableField<AttestedViewRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("uuid_generate_v4()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>ehr.attested_view.attestation_id</code>.
     */
    public final TableField<AttestedViewRecord, UUID> ATTESTATION_ID = createField(DSL.name("attestation_id"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.attested_view.alternate_text</code>.
     */
    public final TableField<AttestedViewRecord, String> ALTERNATE_TEXT = createField(DSL.name("alternate_text"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.attested_view.compression_algorithm</code>.
     */
    public final TableField<AttestedViewRecord, String> COMPRESSION_ALGORITHM = createField(DSL.name("compression_algorithm"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.attested_view.media_type</code>.
     */
    public final TableField<AttestedViewRecord, String> MEDIA_TYPE = createField(DSL.name("media_type"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.attested_view.data</code>.
     */
    public final TableField<AttestedViewRecord, byte[]> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>ehr.attested_view.integrity_check</code>.
     */
    public final TableField<AttestedViewRecord, byte[]> INTEGRITY_CHECK = createField(DSL.name("integrity_check"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>ehr.attested_view.integrity_check_algorithm</code>.
     */
    public final TableField<AttestedViewRecord, String> INTEGRITY_CHECK_ALGORITHM = createField(DSL.name("integrity_check_algorithm"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.attested_view.thumbnail</code>.
     */
    public final TableField<AttestedViewRecord, UUID> THUMBNAIL = createField(DSL.name("thumbnail"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.attested_view.uri</code>.
     */
    public final TableField<AttestedViewRecord, String> URI = createField(DSL.name("uri"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>ehr.attested_view</code> table reference
     */
    public AttestedView() {
        this(DSL.name("attested_view"), null);
    }

    /**
     * Create an aliased <code>ehr.attested_view</code> table reference
     */
    public AttestedView(String alias) {
        this(DSL.name(alias), ATTESTED_VIEW);
    }

    /**
     * Create an aliased <code>ehr.attested_view</code> table reference
     */
    public AttestedView(Name alias) {
        this(alias, ATTESTED_VIEW);
    }

    private AttestedView(Name alias, Table<AttestedViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private AttestedView(Name alias, Table<AttestedViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AttestedView(Table<O> child, ForeignKey<O, AttestedViewRecord> key) {
        super(child, key, ATTESTED_VIEW);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ATTESTED_VIEW_ATTESTATION_IDX, Indexes.ATTESTED_VIEW_PKEY);
    }

    @Override
    public UniqueKey<AttestedViewRecord> getPrimaryKey() {
        return Keys.ATTESTED_VIEW_PKEY;
    }

    @Override
    public List<UniqueKey<AttestedViewRecord>> getKeys() {
        return Arrays.<UniqueKey<AttestedViewRecord>>asList(Keys.ATTESTED_VIEW_PKEY);
    }

    @Override
    public List<ForeignKey<AttestedViewRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AttestedViewRecord, ?>>asList(Keys.ATTESTED_VIEW__ATTESTED_VIEW_ATTESTATION_ID_FKEY);
    }

    public Attestation attestation() {
        return new Attestation(this, Keys.ATTESTED_VIEW__ATTESTED_VIEW_ATTESTATION_ID_FKEY);
    }

    @Override
    public AttestedView as(String alias) {
        return new AttestedView(DSL.name(alias), this);
    }

    @Override
    public AttestedView as(Name alias) {
        return new AttestedView(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AttestedView rename(String name) {
        return new AttestedView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AttestedView rename(Name name) {
        return new AttestedView(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, UUID, String, String, String, byte[], byte[], String, UUID, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
