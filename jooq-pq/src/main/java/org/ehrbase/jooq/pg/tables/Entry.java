/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.ehrbase.jooq.binding.SysPeriodBinder;
import org.ehrbase.jooq.pg.Ehr;
import org.ehrbase.jooq.pg.Indexes;
import org.ehrbase.jooq.pg.Keys;
import org.ehrbase.jooq.pg.enums.EntryType;
import org.ehrbase.jooq.pg.udt.DvCodedText;
import org.ehrbase.jooq.pg.udt.records.DvCodedTextRecord;
import org.ehrbase.jooq.pg.tables.records.EntryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Entry extends TableImpl<EntryRecord> {

    private static final long serialVersionUID = 727075128;

    /**
     * The reference instance of <code>ehr.entry</code>
     */
    public static final Entry ENTRY = new Entry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntryRecord> getRecordType() {
        return EntryRecord.class;
    }

    /**
     * The column <code>ehr.entry.id</code>.
     */
    public final TableField<EntryRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("uuid_generate_v4()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>ehr.entry.composition_id</code>.
     */
    public final TableField<EntryRecord, UUID> COMPOSITION_ID = createField(DSL.name("composition_id"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.entry.sequence</code>.
     */
    public final TableField<EntryRecord, Integer> SEQUENCE = createField(DSL.name("sequence"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ehr.entry.item_type</code>.
     */
    public final TableField<EntryRecord, EntryType> ITEM_TYPE = createField(DSL.name("item_type"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(EntryType.class), this, "");

    /**
     * The column <code>ehr.entry.template_id</code>.
     */
    public final TableField<EntryRecord, String> TEMPLATE_ID = createField(DSL.name("template_id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.entry.template_uuid</code>.
     */
    public final TableField<EntryRecord, UUID> TEMPLATE_UUID = createField(DSL.name("template_uuid"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>ehr.entry.archetype_id</code>.
     */
    public final TableField<EntryRecord, String> ARCHETYPE_ID = createField(DSL.name("archetype_id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>ehr.entry.category</code>.
     */
    public final TableField<EntryRecord, DvCodedTextRecord> CATEGORY = createField(DSL.name("category"), DvCodedText.DV_CODED_TEXT.getDataType(), this, "");

    /**
     * The column <code>ehr.entry.entry</code>.
     */
    public final TableField<EntryRecord, JSONB> ENTRY_ = createField(DSL.name("entry"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * The column <code>ehr.entry.sys_transaction</code>.
     */
    public final TableField<EntryRecord, Timestamp> SYS_TRANSACTION = createField(DSL.name("sys_transaction"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>ehr.entry.sys_period</code>.
     */
    public final TableField<EntryRecord, java.util.AbstractMap.SimpleEntry<java.time.OffsetDateTime,
                                        java.time.OffsetDateTime>> SYS_PERIOD = createField(DSL.name("sys_period"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tstzrange\"").defaultValue(org.jooq.impl.DSL.field("tstzrange(now(), NULL::timestamp with time zone)", org.jooq.impl.SQLDataType.OTHER)), this, "", new SysPeriodBinder());

    /**
     * The column <code>ehr.entry.rm_version</code>.
     */
    public final TableField<EntryRecord, String> RM_VERSION = createField(DSL.name("rm_version"), org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("'1.0.4'::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>ehr.entry.name</code>.
     */
    public final TableField<EntryRecord, DvCodedTextRecord> NAME = createField(DSL.name("name"), DvCodedText.DV_CODED_TEXT.getDataType(), this, "");

    /**
     * The column <code>ehr.entry.ehr_id</code>.
     */
    public final TableField<EntryRecord, UUID> EHR_ID = createField(DSL.name("ehr_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>ehr.entry</code> table reference
     */
    public Entry() {
        this(DSL.name("entry"), null);
    }

    /**
     * Create an aliased <code>ehr.entry</code> table reference
     */
    public Entry(String alias) {
        this(DSL.name(alias), ENTRY);
    }

    /**
     * Create an aliased <code>ehr.entry</code> table reference
     */
    public Entry(Name alias) {
        this(alias, ENTRY);
    }

    private Entry(Name alias, Table<EntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Entry(Name alias, Table<EntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Entry(Table<O> child, ForeignKey<O, EntryRecord> key) {
        super(child, key, ENTRY);
    }

    @Override
    public Schema getSchema() {
        return Ehr.EHR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ENTRY_COMPOSITION_ID_IDX, Indexes.ENTRY_PKEY, Indexes.GIN_ENTRY_PATH_IDX, Indexes.TEMPLATE_ENTRY_IDX);
    }

    @Override
    public UniqueKey<EntryRecord> getPrimaryKey() {
        return Keys.ENTRY_PKEY;
    }

    @Override
    public List<UniqueKey<EntryRecord>> getKeys() {
        return Arrays.<UniqueKey<EntryRecord>>asList(Keys.ENTRY_PKEY);
    }

    @Override
    public List<ForeignKey<EntryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EntryRecord, ?>>asList(Keys.ENTRY__ENTRY_COMPOSITION_ID_FKEY);
    }

    public Composition composition() {
        return new Composition(this, Keys.ENTRY__ENTRY_COMPOSITION_ID_FKEY);
    }

    @Override
    public Entry as(String alias) {
        return new Entry(DSL.name(alias), this);
    }

    @Override
    public Entry as(Name alias) {
        return new Entry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Entry rename(String name) {
        return new Entry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Entry rename(Name name) {
        return new Entry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<UUID, UUID, Integer, EntryType, String, UUID, String, DvCodedTextRecord, JSONB, Timestamp, java.util.AbstractMap.SimpleEntry<java.time.OffsetDateTime,
                                        java.time.OffsetDateTime>, String, DvCodedTextRecord, UUID> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
